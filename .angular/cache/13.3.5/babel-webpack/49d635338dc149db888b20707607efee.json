{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst apiUrl = 'https://greendragonflix.herokuapp.com/';\nexport let UserRegistrationService = /*#__PURE__*/(() => {\n  class UserRegistrationService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n    }\n\n    userLogin(userDetails) {\n      console.log(userDetails); //is this bad not to use .pipe( map(res => res) ) ?\n      //HttpClient automatically returns the response body according to Angular Docs\n\n      return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n    }\n\n    getMovie(movieTitle) {\n      let accessToken = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/' + movieTitle, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n\n    getDirector(directorName) {\n      const accessToken = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'directors/' + directorName, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(map(res => this.extractResponseData));\n    }\n\n    getGenre(genreName) {\n      const accessToken = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'genres/' + genreName, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(map(res => this.extractResponseData));\n    }\n\n    getUser() {\n      const accessToken = localStorage.getItem(\"token\");\n      const username = localStorage.getItem(\"user\");\n      return this.http.get(apiUrl + 'users/' + username, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n    } //get favorite movies from user info (use info from getUser)\n\n\n    addFavoriteMovie(movieID) {\n      const accessToken = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      console.log('adding favorite movie...');\n      return this.http.post(apiUrl + 'users/' + username + '/movies/' + movieID, movieID, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n\n    deleteFavoriteMovie(movieID) {\n      const accessToken = localStorage.getItem(\"token\");\n      const username = localStorage.getItem('user');\n      return this.http.delete(apiUrl + 'users/' + username + '/movies/' + movieID, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n\n    updateUser(userDetails) {\n      const accessToken = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      return this.http.put(apiUrl + 'users/' + username, userDetails, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n\n    deleteUser(username) {\n      const accessToken = localStorage.getItem('token');\n      return this.http.put(apiUrl + 'users/' + username, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: `Bearer ${token}`\n        })\n      });\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n  }\n\n  UserRegistrationService.ɵfac = function UserRegistrationService_Factory(t) {\n    return new (t || UserRegistrationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserRegistrationService,\n    factory: UserRegistrationService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserRegistrationService;\n})();\nexport class FetchApiDataService {}","map":null,"metadata":{},"sourceType":"module"}