{"ast":null,"code":"import _asyncToGenerator from \"/Users/krishokr/CF_Projects/green-dragon-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { GenreComponent } from '../genre/genre.component';\nimport { DirectorComponent } from '../director/director.component';\nimport { SynopsisComponent } from '../synopsis/synopsis.component';\nlet MovieCardComponent = class MovieCardComponent {\n  constructor(UserRegistration, router, dialog) {\n    this.UserRegistration = UserRegistration;\n    this.router = router;\n    this.dialog = dialog;\n    this.movies = [];\n    this.allMovies = [];\n    this.user = {};\n    this.userFavoriteMovies = {};\n    this.favoriteView = false;\n  }\n  /**\n   * component is used\n   */\n\n\n  ngOnInit() {\n    this.favoriteView ? this.populateFavoriteMoviesInMoviesArray() : this.initializeApp();\n  }\n\n  initializeApp() {\n    console.log('All movies view');\n    this.getMovies();\n    this.getUser();\n  }\n\n  determineInitialFavorites() {\n    console.log('inside determineFavorites');\n    console.log(this.user);\n    console.log(this.movies);\n    this.movies.forEach(movie => {\n      let id = movie._id;\n      this.user.FavoriteMovies.includes(id) ? this.userFavoriteMovies[id] = true : this.userFavoriteMovies = false;\n    });\n    console.log('User Favorite Movies: ');\n    console.log(Object.keys(this.userFavoriteMovies));\n  }\n\n  getMovies() {\n    this.UserRegistration.getAllMovies().subscribe(resp => {\n      if (this.favoriteView) {\n        console.log('populating movies with favorites...');\n        console.log(this.user.FavoriteMovies);\n        let collectFavorites = [];\n        this.user.FavoriteMovies.forEach(id => {\n          collectFavorites.push(resp.find(movie => movie._id === id));\n        });\n        this.movies = collectFavorites;\n        console.log(this.movies);\n      } else {\n        this.movies = resp;\n      }\n\n      console.log(this.movies);\n      return this.movies;\n    });\n  }\n\n  populateFavoriteMoviesInMoviesArray() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('Favorite movies');\n      yield _this.getUser();\n      yield _this.getMovies();\n    })();\n  }\n\n  openGenreDialog(genre) {\n    this.dialog.open(GenreComponent, {\n      width: '280px',\n      data: genre\n    });\n  }\n\n  openDirectorDialog(director) {\n    this.dialog.open(DirectorComponent, {\n      width: '280px',\n      data: director\n    });\n  }\n\n  openSynopsisDialog(description) {\n    this.dialog.open(SynopsisComponent, {\n      width: '280px',\n      data: {\n        description\n      }\n    });\n  } // Adding a Favorite Movie\n\n\n  getUser() {\n    this.UserRegistration.getUser().subscribe(result => {\n      this.user = result;\n      console.log(this.user);\n    });\n  }\n\n  duplicateFavoriteMovie(id) {\n    this.getUser();\n\n    if (this.user.FavoriteMovies.includes(id)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  addFavoriteMovie(id) {\n    if (!this.duplicateFavoriteMovie(id)) {\n      console.log(this.duplicateFavoriteMovie(id));\n      this.UserRegistration.addFavoriteMovie(id).subscribe(result => console.log(result));\n    } else {\n      // this.status = 'Duplicate movie cannot be added.'\n      console.log('Duplicate movie - cannot be added.');\n    }\n  }\n\n  deleteFavoriteMovie(id) {\n    this.getUser();\n\n    if (this.user.FavoriteMovies.includes(id)) {\n      this.UserRegistration.deleteFavoriteMovie(id).subscribe(result => {\n        console.log(result);\n        console.log('Movie has been deleted');\n      });\n    }\n\n    this.getUser();\n  }\n\n};\n\n__decorate([Input()], MovieCardComponent.prototype, \"favoriteView\", void 0);\n\nMovieCardComponent = __decorate([Component({\n  selector: 'app-movie-card',\n  templateUrl: './movie-card.component.html',\n  styleUrls: ['./movie-card.component.scss']\n})], MovieCardComponent);\nexport { MovieCardComponent };","map":{"version":3,"sources":["/Users/krishokr/CF_Projects/green-dragon-Angular/src/app/movie-card/movie-card.component.ts"],"names":["__decorate","Component","Input","GenreComponent","DirectorComponent","SynopsisComponent","MovieCardComponent","constructor","UserRegistration","router","dialog","movies","allMovies","user","userFavoriteMovies","favoriteView","ngOnInit","populateFavoriteMoviesInMoviesArray","initializeApp","console","log","getMovies","getUser","determineInitialFavorites","forEach","movie","id","_id","FavoriteMovies","includes","Object","keys","getAllMovies","subscribe","resp","collectFavorites","push","find","openGenreDialog","genre","open","width","data","openDirectorDialog","director","openSynopsisDialog","description","result","duplicateFavoriteMovie","addFavoriteMovie","deleteFavoriteMovie","prototype","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,eAAjC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,IAAIC,kBAAkB,GAAG,MAAMA,kBAAN,CAAyB;AAC9CC,EAAAA,WAAW,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmC;AAC1C,SAAKF,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKC,YAAL,GAAoB,KAApB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,SAAKD,YAAL,GAAoB,KAAKE,mCAAL,EAApB,GAAiE,KAAKC,aAAL,EAAjE;AACH;;AACDA,EAAAA,aAAa,GAAG;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,SAAKC,SAAL;AACA,SAAKC,OAAL;AACH;;AACDC,EAAAA,yBAAyB,GAAG;AACxBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,IAAjB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,MAAjB;AACA,SAAKA,MAAL,CAAYa,OAAZ,CAAoBC,KAAK,IAAI;AACzB,UAAIC,EAAE,GAAGD,KAAK,CAACE,GAAf;AACA,WAAKd,IAAL,CAAUe,cAAV,CAAyBC,QAAzB,CAAkCH,EAAlC,IAAwC,KAAKZ,kBAAL,CAAwBY,EAAxB,IAA8B,IAAtE,GAA6E,KAAKZ,kBAAL,GAA0B,KAAvG;AACH,KAHD;AAIAK,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYU,MAAM,CAACC,IAAP,CAAY,KAAKjB,kBAAjB,CAAZ;AACH;;AACDO,EAAAA,SAAS,GAAG;AACR,SAAKb,gBAAL,CAAsBwB,YAAtB,GAAqCC,SAArC,CAAgDC,IAAD,IAAU;AACrD,UAAI,KAAKnB,YAAT,EAAuB;AACnBI,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,IAAL,CAAUe,cAAtB;AACA,YAAIO,gBAAgB,GAAG,EAAvB;AACA,aAAKtB,IAAL,CAAUe,cAAV,CAAyBJ,OAAzB,CAAkCE,EAAD,IAAQ;AACrCS,UAAAA,gBAAgB,CAACC,IAAjB,CAAsBF,IAAI,CAACG,IAAL,CAAUZ,KAAK,IAAIA,KAAK,CAACE,GAAN,KAAcD,EAAjC,CAAtB;AACH,SAFD;AAGA,aAAKf,MAAL,GAAcwB,gBAAd;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,MAAjB;AACH,OATD,MAUK;AACD,aAAKA,MAAL,GAAcuB,IAAd;AACH;;AACDf,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,MAAjB;AACA,aAAO,KAAKA,MAAZ;AACH,KAhBD;AAiBH;;AACKM,EAAAA,mCAAmC,GAAG;AAAA;;AAAA;AACxCE,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,YAAM,KAAI,CAACE,OAAL,EAAN;AACA,YAAM,KAAI,CAACD,SAAL,EAAN;AAHwC;AAI3C;;AACDiB,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACnB,SAAK7B,MAAL,CAAY8B,IAAZ,CAAiBrC,cAAjB,EAAiC;AAC7BsC,MAAAA,KAAK,EAAE,OADsB;AAE7BC,MAAAA,IAAI,EAAEH;AAFuB,KAAjC;AAIH;;AACDI,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AACzB,SAAKlC,MAAL,CAAY8B,IAAZ,CAAiBpC,iBAAjB,EAAoC;AAChCqC,MAAAA,KAAK,EAAE,OADyB;AAEhCC,MAAAA,IAAI,EAAEE;AAF0B,KAApC;AAIH;;AACDC,EAAAA,kBAAkB,CAACC,WAAD,EAAc;AAC5B,SAAKpC,MAAL,CAAY8B,IAAZ,CAAiBnC,iBAAjB,EAAoC;AAChCoC,MAAAA,KAAK,EAAE,OADyB;AAEhCC,MAAAA,IAAI,EAAE;AACFI,QAAAA;AADE;AAF0B,KAApC;AAMH,GA5E6C,CA6E9C;;;AACAxB,EAAAA,OAAO,GAAG;AACN,SAAKd,gBAAL,CAAsBc,OAAtB,GAAgCW,SAAhC,CAA2Cc,MAAD,IAAY;AAClD,WAAKlC,IAAL,GAAYkC,MAAZ;AACA5B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,IAAjB;AACH,KAHD;AAIH;;AACDmC,EAAAA,sBAAsB,CAACtB,EAAD,EAAK;AACvB,SAAKJ,OAAL;;AACA,QAAI,KAAKT,IAAL,CAAUe,cAAV,CAAyBC,QAAzB,CAAkCH,EAAlC,CAAJ,EAA2C;AACvC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACDuB,EAAAA,gBAAgB,CAACvB,EAAD,EAAK;AACjB,QAAI,CAAC,KAAKsB,sBAAL,CAA4BtB,EAA5B,CAAL,EAAsC;AAClCP,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK4B,sBAAL,CAA4BtB,EAA5B,CAAZ;AACA,WAAKlB,gBAAL,CAAsByC,gBAAtB,CAAuCvB,EAAvC,EAA2CO,SAA3C,CAAqDc,MAAM,IAAI5B,OAAO,CAACC,GAAR,CAAY2B,MAAZ,CAA/D;AACH,KAHD,MAIK;AACD;AACA5B,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACH;AACJ;;AACD8B,EAAAA,mBAAmB,CAACxB,EAAD,EAAK;AACpB,SAAKJ,OAAL;;AACA,QAAI,KAAKT,IAAL,CAAUe,cAAV,CAAyBC,QAAzB,CAAkCH,EAAlC,CAAJ,EAA2C;AACvC,WAAKlB,gBAAL,CAAsB0C,mBAAtB,CAA0CxB,EAA1C,EAA8CO,SAA9C,CAAwDc,MAAM,IAAI;AAC9D5B,QAAAA,OAAO,CAACC,GAAR,CAAY2B,MAAZ;AACA5B,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,OAHD;AAIH;;AACD,SAAKE,OAAL;AACH;;AA9G6C,CAAlD;;AAgHAtB,UAAU,CAAC,CACPE,KAAK,EADE,CAAD,EAEPI,kBAAkB,CAAC6C,SAFZ,EAEuB,cAFvB,EAEuC,KAAK,CAF5C,CAAV;;AAGA7C,kBAAkB,GAAGN,UAAU,CAAC,CAC5BC,SAAS,CAAC;AACNmD,EAAAA,QAAQ,EAAE,gBADJ;AAENC,EAAAA,WAAW,EAAE,6BAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,6BAAD;AAHL,CAAD,CADmB,CAAD,EAM5BhD,kBAN4B,CAA/B;AAOA,SAASA,kBAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { GenreComponent } from '../genre/genre.component';\nimport { DirectorComponent } from '../director/director.component';\nimport { SynopsisComponent } from '../synopsis/synopsis.component';\nlet MovieCardComponent = class MovieCardComponent {\n    constructor(UserRegistration, router, dialog) {\n        this.UserRegistration = UserRegistration;\n        this.router = router;\n        this.dialog = dialog;\n        this.movies = [];\n        this.allMovies = [];\n        this.user = {};\n        this.userFavoriteMovies = {};\n        this.favoriteView = false;\n    }\n    /**\n     * component is used\n     */\n    ngOnInit() {\n        this.favoriteView ? this.populateFavoriteMoviesInMoviesArray() : this.initializeApp();\n    }\n    initializeApp() {\n        console.log('All movies view');\n        this.getMovies();\n        this.getUser();\n    }\n    determineInitialFavorites() {\n        console.log('inside determineFavorites');\n        console.log(this.user);\n        console.log(this.movies);\n        this.movies.forEach(movie => {\n            let id = movie._id;\n            this.user.FavoriteMovies.includes(id) ? this.userFavoriteMovies[id] = true : this.userFavoriteMovies = false;\n        });\n        console.log('User Favorite Movies: ');\n        console.log(Object.keys(this.userFavoriteMovies));\n    }\n    getMovies() {\n        this.UserRegistration.getAllMovies().subscribe((resp) => {\n            if (this.favoriteView) {\n                console.log('populating movies with favorites...');\n                console.log(this.user.FavoriteMovies);\n                let collectFavorites = [];\n                this.user.FavoriteMovies.forEach((id) => {\n                    collectFavorites.push(resp.find(movie => movie._id === id));\n                });\n                this.movies = collectFavorites;\n                console.log(this.movies);\n            }\n            else {\n                this.movies = resp;\n            }\n            console.log(this.movies);\n            return this.movies;\n        });\n    }\n    async populateFavoriteMoviesInMoviesArray() {\n        console.log('Favorite movies');\n        await this.getUser();\n        await this.getMovies();\n    }\n    openGenreDialog(genre) {\n        this.dialog.open(GenreComponent, {\n            width: '280px',\n            data: genre\n        });\n    }\n    openDirectorDialog(director) {\n        this.dialog.open(DirectorComponent, {\n            width: '280px',\n            data: director\n        });\n    }\n    openSynopsisDialog(description) {\n        this.dialog.open(SynopsisComponent, {\n            width: '280px',\n            data: {\n                description\n            }\n        });\n    }\n    // Adding a Favorite Movie\n    getUser() {\n        this.UserRegistration.getUser().subscribe((result) => {\n            this.user = result;\n            console.log(this.user);\n        });\n    }\n    duplicateFavoriteMovie(id) {\n        this.getUser();\n        if (this.user.FavoriteMovies.includes(id)) {\n            return true;\n        }\n        return false;\n    }\n    addFavoriteMovie(id) {\n        if (!this.duplicateFavoriteMovie(id)) {\n            console.log(this.duplicateFavoriteMovie(id));\n            this.UserRegistration.addFavoriteMovie(id).subscribe(result => console.log(result));\n        }\n        else {\n            // this.status = 'Duplicate movie cannot be added.'\n            console.log('Duplicate movie - cannot be added.');\n        }\n    }\n    deleteFavoriteMovie(id) {\n        this.getUser();\n        if (this.user.FavoriteMovies.includes(id)) {\n            this.UserRegistration.deleteFavoriteMovie(id).subscribe(result => {\n                console.log(result);\n                console.log('Movie has been deleted');\n            });\n        }\n        this.getUser();\n    }\n};\n__decorate([\n    Input()\n], MovieCardComponent.prototype, \"favoriteView\", void 0);\nMovieCardComponent = __decorate([\n    Component({\n        selector: 'app-movie-card',\n        templateUrl: './movie-card.component.html',\n        styleUrls: ['./movie-card.component.scss']\n    })\n], MovieCardComponent);\nexport { MovieCardComponent };\n"]},"metadata":{},"sourceType":"module"}