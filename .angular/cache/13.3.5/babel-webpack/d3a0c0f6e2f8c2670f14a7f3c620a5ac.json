{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst apiUrl = 'https://greendragonflix.herokuapp.com/';\nexport let UserRegistrationService = /*#__PURE__*/(() => {\n  class UserRegistrationService {\n    /**\n     * @param http Constructor imports HttpClient\n     */\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Function for registering a new user.\n     * @param userDetails An object that contains the new user's username, email, password, and birthday.\n     * @returns The http response to the user registration request from the API.\n     */\n\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n    }\n    /**\n     * Function that allows users to login.\n     * @param userDetails An object that contains the user's username and password.\n     * @returns If the user's username and password were correct, the function will return the token and the username for local storage.\n     */\n\n\n    userLogin(userDetails) {\n      console.log(userDetails); //is this bad not to use .pipe( map(res => res) ) ?\n      //HttpClient automatically returns the response body according to Angular Docs\n\n      return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n    }\n    /**\n     * Function that gets a specific movie from the API.\n     * @param movieTitle A movie's title.\n     * @returns An object with the specific movie's data including its title, director, genre, and description.\n     */\n\n\n    getMovie(movieTitle) {\n      let accessToken = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/' + movieTitle, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Function that gets information about a specific director.\n     * @param directorName A director's name as a string.\n     * @returns An object with information about the director, including their name, birth year, and biography.\n     */\n\n\n    getDirector(directorName) {\n      const accessToken = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'directors/' + directorName, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(map(res => this.extractResponseData));\n    }\n    /**\n     * Function that gets information about a specific genre.\n     * @param genreName A specific genre's name as a string.\n     * @returns An object with information about the genre including the genre's name and description.\n     */\n\n\n    getGenre(genreName) {\n      const accessToken = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'genres/' + genreName, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(map(res => this.extractResponseData));\n    }\n    /**\n     * Function that gets information about the current user.\n     * @returns An object with information about a user including their username, email, birthday, hashed password, and favorite movies.\n     */\n\n\n    getUser() {\n      const accessToken = localStorage.getItem(\"token\");\n      const username = localStorage.getItem(\"user\");\n      return this.http.get(apiUrl + 'users/' + username, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n    }\n    /**\n     * Function that adds a new favorite movie to the user's favorite movies.\n     * @param movieID The movie ID of the movie to add as a string.\n     * @returns A response status ensuring the movie has been added.\n     */\n\n\n    addFavoriteMovie(movieID) {\n      const accessToken = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      console.log('adding favorite movie...');\n      return this.http.post(apiUrl + 'users/' + username + '/movies/' + movieID, movieID, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Function that deletes a favorite movie from the user's favorite movies.\n     * @param movieID The movie ID of the movie to delete as a string.\n     * @returns A response status ensuring the movie has been deleted.\n     */\n\n\n    deleteFavoriteMovie(movieID) {\n      const accessToken = localStorage.getItem(\"token\");\n      const username = localStorage.getItem('user');\n      return this.http.delete(apiUrl + 'users/' + username + '/movies/' + movieID, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Function that allows a user to update their information.\n     * @param userDetails An object with the user's updated and old information including the username, password, email, birthday, and favorite movies.\n     * @returns A response status ensuring the user's information has been updated.\n     */\n\n\n    updateUser(userDetails) {\n      const accessToken = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      return this.http.put(apiUrl + 'users/' + username, userDetails, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Function that allows the user to delete their profile.\n     * @param username The user's username as a string.\n     * @returns A response status indicating the success or failure of the deletion.\n     */\n\n\n    deleteUser(username) {\n      const accessToken = localStorage.getItem('token');\n      return this.http.put(apiUrl + 'users/' + username, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Error-handling function.\n     * @param error Http response error from any API call.\n     * @returns Specific error in console, as well as a string that warns the user the request did not go through.\n     */\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurred:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n    /**\n     * Function that gets all movies.\n     * @returns An array with all the movies in the database as objects.\n     */\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: `Bearer ${token}`\n        })\n      });\n    }\n    /**\n     * Helper function that allows service functions to format response data.\n     * @param res Response from any API call.\n     * @returns The response, or an empty object.\n     */\n\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n  }\n\n  UserRegistrationService.ɵfac = function UserRegistrationService_Factory(t) {\n    return new (t || UserRegistrationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserRegistrationService,\n    factory: UserRegistrationService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserRegistrationService;\n})();\nexport class FetchApiDataService {}","map":null,"metadata":{},"sourceType":"module"}